package lesson1;


// Class - Самая большая единица в Java. Скелет человека : class
// method (функция) - Функции человека (ходить, пить...) : void walk() или int/boolean/String/*любой тип данных* walk()
// void -> Кинули бумеранг, обратно он к нам не прилетел
// int/double... -> return *переменная или значение*
// Сигнатура метода: все, до параметров (public static void main) - все до круглых скобок
// Параметры метода: все, что принимает метод (int x, int y)
// В метод передаются значения (а не ссылки на объект)
// field (поле, аттрибут, свойство) - "настройки" человека (цвет глаз, возраст, имя...)
// Поле это по сути глобальная переменная внутри класса
// Необязательно (без специфичных модификаторов) поле должно содержать какое-то значение сразу

// Модификаторы доступа (к полям, к методам, к классам)
// public (доступ из любого места / из любого другого класса или даже папки)
// protected (доступ либо из одной и той же папки, либо от унаследованного класса)
// default (-) (доступ только из одной и той же папки)
// private (доступ только внутри данного класса)
// Модификаторы доступа позволяют сказать, где поле/класс/метод виден и кто его может использовать (обращаться к нему)

// Модификатор "статичности"
// К полям, к методам, к классам (вложенным в основной)
// static -> помеченное поле становится общедоступным для класса (Все экземпляры/объекты класса имеют общее значение этого поля)
// static методы -> невозможно переопределить поведение метода (у наследника), могут использовать ТОЛЬКО статичные переменные/методы
// non-static (-) -> означает, что данное поле индивидуально для каждого объекта/экземпляра класса
// у методов -> из non-static можем вызывать/использовать non-static/static поля/методы
public class Main { // JVM не может создать класс (основной) если он не public
    public String qwe; // non-static
    protected static int b; // 0
    // double -> 0.0
    // boolean -> false
    // char -> '\u0000'
    // short -> 0
    // *Любой ссылочный тип данных*: String, Scanner => null
    // Внешняя переменная может использоваться внутри, в то время как внутренняя переменная недоступна внешнему окружению
    public static void main(String[] args) {
        int a = 10; // static
        Main m = new Main();
        System.out.println(m.b);
        System.out.println(m.qwe);
        m.sum(2, 5); // b = 7
        m.sub(2, 5); // b = -3
        System.out.println(m.b);
    }

    // sum(2, 5) => sum(x = 2, x = 5)
    // void sum(String str) => String s = "qwe"; sum(str = s) -> str = "bla"
    int sum(int x, int y) {
        // code
        b = x + y;
        return x + y;
    }
    int sub(int x, int y) {
        // code
        b = x - y;
        return x - y;
    }
}

